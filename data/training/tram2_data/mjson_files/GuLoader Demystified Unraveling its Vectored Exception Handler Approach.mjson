{"signal": "title: GuLoader Demystified: Unraveling its Vectored Exception Handler Approach\nurl: https://securitynews.sonicwall.com/xmlpost/guloader-demystified-unraveling-its-vectored-exception-handler-approach/\n\nGuLoader Demystified: Unraveling its Vectored Exception Handler Approach\nMay 31, 2023\nOVERVIEW\nSonicWall Capture Labs Research team recently observed a new variant of GuLoader (a.k.a Cloudeye). GuLoader is a shellcode-based downloader, known for its numerous anti-analysis techniques and control flow obfuscation. In latest variant of GuLoader it introduces new ways to raise exceptions that hamper complete analysis process and its execution under controlled environment.\nIn this blog post, we will discuss\nUnpacking of GuLoader’s shellcodes.\nUnderstanding a new anti-debug technique deployed by GuLoader.\nDeep dive into GuLoader’s custom Vectored Exception Handler.\nWriting an IDAPython script to deobfuscate the control flow of shellcode and to make GuLoader’s analysis easy and fast.\nINTRODUCTION\nGuLoader is an advanced downloader first discovered in 2019 and since then it kept evolving, adding new anti-debugging techniques with its every new variant. It downloads malicious payload including AgentTesla, Azorult and Ramcos RAT etc. Currently GuLoader is spreading through malspam campaign and packed using NSIS installer.\nUNPACKING GULOADER’S SHELLCODE\nGuLoader’s shellcode is executed after three layers.\nLayer 1:\nRecent variant of GuLoader is spreading as NSIS Installer consisting of NSIS script, DLL plugin and encrypted shellcode’s file. We need NSIS variant of 7-zip to extract the NSIS script, as typical installer of 7-zip is unable to extract the NSIS script.\n\nFig 1. Extracted files from NSIS installer.\nFile “Hangarer.Man” contains shellcode of Layer 2 and an encrypted shellcode of Layer 3 which is main shellcode of GuLoader.\nSystem.dll is DLL file which exports multiple functions. An Exported function named as “Call” is called by NSIS script. This function is responsible to allocate and execute Layer 2 shellcode.\n\nFig 2. NSIS script calling Exported function Call.\nCall function allocates memory space and copies content of file Hangarer.Man from offset 0x409 till last byte. It then calls CallWindowProcW API. First parameter of CallWindowProcW is lpPrevWndFunc. lpPrevWndFunc is callback function, which is set to address of allocated memory space, which results in indirect execution of the Layer 2’s shellcode.\nLayer 2:\nMalware immediately decrypts the third layer which located at offset 0x1c9 in layer 2 and starts its execution.\n\nFig 3. Decryption of layer 3.\nLayer 3:\nIt is the final GuLoader shellcode. This shellcode has complex obfuscation, consisting of junk code, indirect function calls, dynamic API resolution, obfuscated arithmetic value calculations, using stack to decrypt strings, fake instructions, anti-debug, anti-vm, anti-analysis, anti-dump, anti-API hook, anti-emulation techniques.\nDuring analysis of this variant, we have identified a significant enhancement in GuLoader’s one of most effective anti-debug technique that it’s custom Vectored Exception Handler.\nMalware raises exceptions by executing cleverly crafted series of instructions. Also it uses same instructions multiple times in shellcode to make it hard for reverser to perform static and dynamic analysis and to consume lot of time.\nUltimate goal of GuLoader for using this anti-debug technique is to achieve runtime control flow obfuscation.\nGuLoader incorporates various evasions techniques. Mentioning them below in order in which they are get executed.\nScan the virtual memory for the strings related to analysis tools.\nUses Heaven Gate technique to redirect it’s execution under x64 OS.\nCheck QEMU emulator related strings.\nPatch DbgBreakPoint and DbgUiRemoteBreakin API used by debuggers.\nUses EnumWindows API to enumerates windows.\nUses NtSetInformationThread API with ThreadHideDebugger(0x11).\nUses EnumDeviceDrivers and GetDeviceDriverBaseNameA APIs.\nUses MsiEnumProductsA and MsiGetProductInfoA APIs.\nUses OpenSCManagerA and EnumServicesStatusA APIs.\nUse NtQueryInformationProcess API with DebugPort(0x7).\nAn Overview of the Payload’s Execution Sequence\nCreate suspended child process of itself.\nIn newly created process, it creates a section using genuine file to avoid AVs suspicious scanning. In this case it was using mshtml.dll.\nInjects complete main shellcode in child process.\nRepeats executing the mentioned evasion techniques one more time.\nAfter successful bypass , it decrypts the c2 URL and download encrypted payload from c2.\nGenerate the payload decryption key. In analyzed sample, key length was 0x303 bytes.\nGuLoader allocates approximately 60MB of memory space for the payload of size few KBs. It decrypts an encrypted payload, use process hollowing to inject decrypted payload into child process and resolves its Import Address Table.\nLastly, it starts payload execution using the ZwCreateThreadEx API.\n \n\nFig 4. Snippet of Payload decryption function.\nAll of the above-mentioned evasion techniques and payload execution sequences are already explained in detail in SonicWall Capture Labs Research team’s blog.\nNEW ENHANCED ANTI-DEBUG TECHNIQUE\nIn the below section we will discuss\nException types and implementation.\nDecoding Vectored Exception Handler function.\nWriting IDAPython script to restore deobfuscate control flow.\nEXCEPTION TYPES & IMPLEMENTATION\nThis variant of GuLoader has added two new additional exceptions EXCEPTION_ACCESS_VIOLATION & EXCEPTION_SINGLE_STEP compared to last variant it has only one exception EXCEPTION_BREAKPOINT exception. We will discuss each exception and understand its pattern to write a script.\nEXCEPTION_ACCESS_VIOLATION (code 0xC0000005)\nWhen malware intentionally tries to write to an inaccessible memory address, exception EXCEPTION_ACCESS_VIOLATION is raised.\nHere, malware constructs zero by series of arithmetic calculations. Then it tries to access memory address pointed by it, which raises exception as zero is inaccessible memory address.\n\nFig 5. EXCEPTION_ACCESS_VIOLATION instructions pattern.\nAs we can see the constant values and operations (mov, xor, sub) are keeps varying for each exception raised.\nEXCEPTION_SINGLE_STEP (code 0x80000004)\nThe FLAGS register is the status register that contains the current state of a x86 CPU. The trap flag is 8th bit of FLAGS register. When the trap flag is set, the system is instructed to single step, it will execute one instruction and then stop. Then contents of registers and memory locations can be examined by Vectored Exception Handler; if they are correct, the system can execute the next instruction.\nThe x86 processor has no instruction to directly set or reset the trap flag. Malware uses combination of (PUSHFD/POPFD) instructions to set trap flag.\nThese operations are done by.\nPushing the flag register on the stack (PUSHFD) .\nModifying the trap flag bit (uses 0x100)\nPopping the flag register back off the stack (POPFD).\nWhen malware is running without debugger, when SINGLE_STEP exception is raised and handled by Vectored Exception Handler.\n\nFig 6. SINGLE_STEP exception instructions pattern.\nHowever while using debugger, no exception can be seen being raised as trap flag is always gets reset after each debugger event is delivered.\nEXCEPTION_BREAKPOINT (code 0x80000003)\nINT3 instruction (0xCC opcode) is used as software breakpoint in debuggers, that’s why when program is running under debugger, control remains to the debugger after it encounter INT3.\nWhen malware is running without debugger exception EXCEPTION_BREAKPOINT is raised, and control is transferred to the Vectored Exception Handler.\n\nFig 7. BREAKPOINT exception instruction patterns.\nNow we have understood how exceptions are being raised by malware. Next will see how malware uses these exceptions to change the control flow at runtime using its custom Vectored Exception Handler.\n \nDECODING VECTORED EXCEPTION HANDLER\nAn application can register a function to handle all exceptions for the application. Vectored handlers are called in the order that they were added.\nGuLoader call RtlAddVectoredExceptionHandler API to add its custom Vectored Exception Handler. RtlAddVectoredExceptionHandler accepts two parameters.\n\nFig 8. Structures of EXCEPTION RECORD & CONTEXT.\nAs we can see in below image, pointer of structure EXCEPTION_POINTERS is being passed as an argument to Vectored Exception Handler(VEH). Using structure EXCEPTION_POINTERS, VEH can access all the information regarding raised exceptions and reading the values of all the registers of processor using structure CONTEXT.\n\nFig 9. Pseudocode of Custom Vectored Exception Handler.\nWhen EXCEPTION_ACCESS_VIOLATION and SINGLE_STEP_EXCEPTION exceptions are raised, handler perform following steps:\nIt checks whether memory address being currently accessed is zero or not. If it is not zero, then it returns 0 and ultimately crashes down.\nBut how handler gets the address of currently accessed memory location? So it uses ExceptionInformantion[1] member of Exception Record to get this additional information about exception.\nChecks if any hardware breakpoints have been set by checking status of the debug registers(DR0 to DR7). If found it set the ContextRecord to 0 which leads malware to crash.\nIf successfully pass the check, it then transforms the EIP to new address using logic Context->Eip += ByteAt(Eip + 2) ^ 0x6A where\nValue 2 depicts size of instruction (mov, jg, jne etc.) where exception is raised.\n0x6A is byte key to transform EIP. (It differs sample to sample)\n\n\nFig 10. Debug register check.\nWhen EXCEPTION_BREAKPOINT exception is raised, handler perform following steps:\nChecks whether hardware breakpoints have been set by checking status of the debug registers(DR0 to DR7). If found it set the ContextRecord to 0 which leads malware to crash.\nScans for applied software breakpoint i.e. CC byte in loop.\nIf successfully pass the check, it then transforms the EIP to new address using logic Context->Eip += ByteAt(Eip + 1) ^ 0x6A where\nValue 1 depicts size of instruction (CC) where exception is raised.\n0x6A is byte key to transform EIP.\n\nWRITING IDA PYTHON SCRIPT\nIDAPython is an IDA Pro plugin that integrates the python programming language, allowing scripts to run in IDA Pro. IDA provides different modules to work on disassembly of instructions.\nThe python script finds instructions pattern that raise an exception and patch them by jump instruction with transformed EIP offset as a target.\nAfter running the python script in IDA, we get clean, easy to analyze, deobfuscated code of GuLoader’s shellcode. Also finds out that GuLoader’s VEH has been called more than 1100 times.\n\nFig 11. Obfuscated code(A), deobfuscated code(B), GuLoader’s entire shellcode graph view(C).\nCONCLUSION\nGuLoader malware introduces new techniques very often which takes much time and efforts of malware analysts to fully analyzed it. We have completely analyzed GuLoader’s custom Vectored Exception Handler and understood how it works.\nWe have written python script to defeat GuLoader shellcode control flow obfuscation and saving time and efforts of malware analyst.\nWe expect further development in GuLoader anti-analysis, anti-debug techniques in upcoming days.\nSonicWall Capture Labs provides protection against this threat via the SonicWall Capture ATP w/RTDMI.\nIOC’s\nSHA256 : 55130719554a0b3dcbf971c646e6e668b663b796f4be09816d405cc15a16d7d6\nC2 URL : hxxp[:]//lena[.]utf[.]by/wp-content/plugins/f8eb81f6deba45169c3b41c05c4590ad/y/mm/mmd/kdRrHFMqRUIujuOy126[.]bin\nFinal Payload (Azorult stealer): d5af42b118d0597c6b71831f2b2ebc8294eca907481d53939563fce7c0f14767\nREFERENCES\n[1] https://securitynews.sonicwall.com/xmlpost/guloader-a-fileless-shellcode-based-malware-in-action/\n[2] https://learn.microsoft.com/en-us/windows/win32/debug/vectored-exception-handling\n[3] https://learn.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-exception_record\n", "metadata": {"phasesDone": ["zone", "token", "content"]}, "asets": [{"type": "zone", "hasID": false, "hasSpan": true, "attrs": [{"name": "region_type", "type": "string", "aggregation": null}], "annots": [[0, 11945, "body"]]}, {"type": "lex", "hasID": false, "hasSpan": true, "attrs": [], "annots": [[0, 5], [5, 6], [7, 15], [16, 27], [27, 28], [29, 39], [40, 43], [44, 52], [53, 62], [63, 70], [71, 79], [80, 83], [83, 84], [85, 90], [90, 93], [93, 105], [105, 106], [106, 115], [115, 116], [116, 119], [119, 120], [120, 127], [127, 128], [128, 199], [199, 200], [202, 210], [211, 222], [222, 223], [224, 234], [235, 238], [239, 247], [248, 257], [258, 265], [266, 274], [275, 278], [279, 281], [281, 282], [283, 287], [288, 296], [297, 306], [307, 314], [315, 319], [320, 328], [329, 333], [334, 342], [343, 351], [352, 353], [354, 357], [358, 365], [366, 368], [369, 377], [378, 379], [379, 381], [381, 383], [383, 384], [385, 393], [393, 395], [396, 404], [405, 407], [408, 409], [410, 425], [426, 436], [436, 437], [438, 443], [444, 447], [448, 451], [452, 460], [461, 474], [475, 485], [486, 489], [490, 497], [498, 502], [503, 514], [514, 515], [516, 518], [519, 525], [526, 533], [534, 536], [537, 545], [546, 548], [549, 559], [560, 563], [564, 568], [569, 571], [572, 577], [578, 588], [589, 593], [594, 600], [601, 609], [610, 618], [619, 626], [627, 630], [631, 634], [635, 644], [645, 650], [651, 661], [662, 673], [673, 674], [675, 677], [678, 682], [683, 687], [688, 692], [692, 693], [694, 696], [697, 701], [702, 709], [710, 719], [720, 722], [723, 733], [734, 744], [744, 745], [746, 759], [760, 761], [762, 765], [766, 776], [777, 786], [787, 795], [796, 798], [799, 807], [807, 808], [809, 813], [814, 818], [819, 823], [824, 834], [835, 841], [842, 850], [851, 860], [861, 868], [868, 869], [870, 877], [878, 880], [881, 890], [891, 897], [898, 900], [901, 912], [913, 916], [917, 924], [925, 929], [930, 932], [933, 942], [943, 946], [947, 949], [950, 954], [955, 965], [966, 974], [975, 979], [980, 983], [984, 988], [988, 989], [990, 1002], [1003, 1011], [1012, 1014], [1015, 1017], [1018, 1026], [1027, 1037], [1038, 1043], [1044, 1054], [1055, 1057], [1058, 1062], [1063, 1066], [1067, 1072], [1073, 1077], [1078, 1080], [1081, 1085], [1086, 1094], [1094, 1095], [1096, 1102], [1103, 1106], [1107, 1121], [1122, 1132], [1133, 1137], [1138, 1141], [1142, 1147], [1148, 1151], [1152, 1159], [1159, 1160], [1161, 1163], [1164, 1173], [1174, 1183], [1184, 1191], [1192, 1201], [1202, 1212], [1212, 1213], [1214, 1221], [1222, 1225], [1226, 1232], [1233, 1236], [1237, 1240], [1240, 1241], [1242, 1251], [1252, 1260], [1261, 1263], [1264, 1273], [1274, 1281], [1282, 1289], [1290, 1298], [1299, 1302], [1303, 1309], [1310, 1315], [1316, 1320], [1321, 1330], [1330, 1331], [1332, 1341], [1342, 1352], [1353, 1362], [1363, 1373], [1374, 1383], [1384, 1386], [1387, 1395], [1396, 1401], [1402, 1407], [1408, 1414], [1414, 1415], [1416, 1421], [1422, 1423], [1423, 1424], [1425, 1431], [1432, 1439], [1440, 1442], [1443, 1451], [1452, 1454], [1455, 1464], [1465, 1467], [1468, 1472], [1473, 1482], [1483, 1493], [1494, 1496], [1497, 1501], [1502, 1508], [1508, 1509], [1510, 1513], [1514, 1520], [1521, 1524], [1525, 1534], [1535, 1546], [1547, 1551], [1551, 1552], [1553, 1555], [1556, 1560], [1561, 1565], [1566, 1573], [1574, 1576], [1577, 1578], [1578, 1582], [1583, 1585], [1586, 1593], [1594, 1597], [1598, 1602], [1603, 1609], [1609, 1610], [1611, 1613], [1614, 1621], [1622, 1631], [1632, 1634], [1635, 1636], [1636, 1640], [1641, 1643], [1644, 1650], [1651, 1653], [1654, 1661], [1662, 1665], [1666, 1670], [1671, 1677], [1677, 1678], [1680, 1683], [1684, 1685], [1685, 1686], [1687, 1696], [1697, 1702], [1703, 1707], [1708, 1712], [1713, 1722], [1722, 1723], [1724, 1728], [1729, 1738], [1738, 1739], [1739, 1743], [1744, 1752], [1753, 1762], [1763, 1765], [1766, 1771], [1772, 1773], [1774, 1777], [1778, 1780], [1781, 1790], [1791, 1800], [1801, 1803], [1804, 1809], [1810, 1811], [1812, 1817], [1818, 1820], [1821, 1825], [1826, 1835], [1836, 1838], [1839, 1847], [1847, 1848], [1849, 1855], [1855, 1856], [1856, 1859], [1860, 1862], [1863, 1866], [1867, 1871], [1872, 1877], [1878, 1885], [1886, 1894], [1895, 1904], [1904, 1905], [1906, 1908], [1909, 1917], [1918, 1926], [1927, 1932], [1933, 1935], [1936, 1942], [1943, 1945], [1946, 1952], [1953, 1955], [1956, 1960], [1961, 1967], [1967, 1968], [1969, 1973], [1974, 1982], [1983, 1985], [1986, 1997], [1998, 2000], [2001, 2009], [2010, 2013], [2014, 2021], [2022, 2027], [2028, 2029], [2030, 2039], [2039, 2040], [2042, 2045], [2046, 2047], [2047, 2048], [2049, 2053], [2054, 2060], [2061, 2068], [2069, 2077], [2078, 2086], [2087, 2091], [2091, 2092], [2093, 2097], [2098, 2106], [2107, 2116], [2117, 2123], [2124, 2129], [2130, 2133], [2134, 2140], [2141, 2148], [2149, 2151], [2152, 2156], [2157, 2165], [2165, 2166], [2166, 2169], [2170, 2174], [2175, 2181], [2182, 2187], [2188, 2192], [2193, 2197], [2198, 2202], [2202, 2203], [2204, 2206], [2207, 2211], [2212, 2217], [2218, 2233], [2234, 2237], [2237, 2238], [2239, 2244], [2245, 2254], [2255, 2257], [2258, 2273], [2274, 2276], [2277, 2290], [2290, 2291], [2292, 2305], [2306, 2308], [2309, 2317], [2318, 2326], [2326, 2327], [2328, 2333], [2334, 2336], [2337, 2340], [2341, 2343], [2344, 2351], [2352, 2354], [2355, 2364], [2365, 2371], [2372, 2377], [2377, 2378], [2379, 2384], [2385, 2392], [2393, 2395], [2396, 2404], [2405, 2414], [2415, 2417], [2418, 2421], [2422, 2427], [2428, 2431], [2432, 2441], [2441, 2442], [2443, 2448], [2449, 2450], [2450, 2451], [2452, 2459], [2460, 2471], [2472, 2480], [2481, 2484], [2485, 2490], [2491, 2496], [2497, 2502], [2503, 2510], [2511, 2513], [2514, 2520], [2521, 2526], [2527, 2529], [2530, 2535], [2536, 2537], [2538, 2541], [2542, 2548], [2549, 2552], [2553, 2562], [2562, 2563], [2565, 2568], [2569, 2570], [2570, 2571], [2572, 2582], [2583, 2585], [2586, 2591], [2592, 2593], [2593, 2594], [2595, 2600], [2601, 2602], [2602, 2603], [2604, 2606], [2607, 2609], [2610, 2613], [2614, 2619], [2620, 2628], [2629, 2638], [2638, 2639], [2640, 2644], [2645, 2654], [2655, 2658], [2659, 2666], [2667, 2678], [2678, 2679], [2680, 2690], [2691, 2693], [2694, 2698], [2699, 2703], [2703, 2704], [2705, 2713], [2714, 2722], [2723, 2728], [2728, 2729], [2730, 2737], [2738, 2741], [2742, 2752], [2752, 2753], [2754, 2764], [2765, 2775], [2776, 2781], [2782, 2794], [2794, 2795], [2796, 2801], [2802, 2807], [2808, 2810], [2811, 2818], [2819, 2826], [2826, 2827], [2828, 2832], [2833, 2845], [2845, 2846], [2847, 2857], [2857, 2858], [2859, 2866], [2866, 2867], [2868, 2881], [2881, 2882], [2883, 2892], [2892, 2893], [2894, 2902], [2903, 2907], [2907, 2908], [2909, 2923], [2924, 2934], [2934, 2935], [2936, 2942], [2943, 2951], [2952, 2954], [2955, 2959], [2960, 2967], [2967, 2968], [2969, 2971], [2972, 2976], [2977, 2987], [2988, 2989], [2990, 3001], [3002, 3013], [3014, 3016], [3017, 3027], [3028, 3031], [3032, 3034], [3035, 3039], [3040, 3049], [3050, 3060], [3061, 3070], [3071, 3075], [3076, 3080], [3081, 3087], [3088, 3096], [3097, 3106], [3107, 3114], [3114, 3115], [3116, 3123], [3124, 3130], [3131, 3141], [3142, 3144], [3145, 3154], [3155, 3163], [3164, 3171], [3172, 3178], [3179, 3181], [3182, 3194], [3194, 3195], [3196, 3200], [3201, 3203], [3204, 3208], [3209, 3213], [3214, 3226], [3227, 3235], [3236, 3241], [3242, 3244], [3245, 3254], [3255, 3257], [3258, 3262], [3263, 3265], [3266, 3270], [3271, 3274], [3275, 3283], [3284, 3286], [3287, 3294], [3295, 3301], [3302, 3305], [3306, 3313], [3314, 3322], [3323, 3326], [3327, 3329], [3330, 3337], [3338, 3341], [3342, 3344], [3345, 3349], [3349, 3350], [3351, 3359], [3360, 3364], [3365, 3367], [3368, 3376], [3377, 3380], [3381, 3386], [3387, 3391], [3392, 3402], [3403, 3412], [3413, 3415], [3416, 3418], [3419, 3426], [3427, 3434], [3435, 3442], [3443, 3447], [3448, 3459], [3459, 3460], [3461, 3469], [3470, 3482], [3483, 3490], [3491, 3499], [3500, 3510], [3510, 3511], [3512, 3522], [3523, 3527], [3528, 3533], [3534, 3536], [3537, 3542], [3543, 3545], [3546, 3551], [3552, 3556], [3557, 3560], [3561, 3564], [3565, 3573], [3573, 3574], [3575, 3579], [3580, 3583], [3584, 3591], [3592, 3598], [3599, 3602], [3603, 3606], [3607, 3614], [3615, 3622], [3623, 3625], [3626, 3634], [3635, 3640], [3640, 3641], [3642, 3646], [3647, 3653], [3654, 3658], [3659, 3668], [3669, 3671], [3672, 3680], [3681, 3685], [3686, 3695], [3696, 3701], [3702, 3705], [3706, 3708], [3708, 3709], [3710, 3715], [3716, 3720], [3721, 3729], [3730, 3737], [3738, 3745], [3745, 3746], [3747, 3752], [3753, 3766], [3767, 3770], [3771, 3789], [3790, 3793], [3794, 3798], [3799, 3801], [3802, 3811], [3811, 3812], [3813, 3817], [3818, 3829], [3830, 3833], [3834, 3836], [3837, 3847], [3848, 3855], [3855, 3856], [3857, 3861], [3862, 3884], [3885, 3888], [3889, 3893], [3894, 3912], [3912, 3913], [3913, 3917], [3917, 3919], [3920, 3924], [3925, 3942], [3943, 3946], [3947, 3971], [3972, 3976], [3976, 3977], [3978, 3982], [3983, 3999], [4000, 4003], [4004, 4022], [4023, 4027], [4027, 4028], [4029, 4033], [4034, 4048], [4049, 4052], [4053, 4072], [4073, 4077], [4077, 4078], [4079, 4082], [4083, 4108], [4109, 4112], [4113, 4117], [4118, 4127], [4127, 4128], [4128, 4131], [4131, 4133], [4134, 4136], [4137, 4145], [4146, 4148], [4149, 4152], [4153, 4162], [4163, 4172], [4173, 4181], [4182, 4188], [4189, 4198], [4199, 4204], [4205, 4212], [4213, 4215], [4216, 4222], [4222, 4223], [4224, 4226], [4227, 4232], [4233, 4240], [4241, 4248], [4248, 4249], [4250, 4252], [4253, 4260], [4261, 4262], [4263, 4270], [4271, 4276], [4277, 4284], [4285, 4289], [4290, 4292], [4293, 4298], [4299, 4302], [4303, 4313], [4314, 4322], [4322, 4323], [4324, 4326], [4327, 4331], [4332, 4336], [4337, 4339], [4340, 4343], [4344, 4349], [4350, 4356], [4356, 4357], [4357, 4360], [4360, 4361], [4362, 4369], [4370, 4378], [4379, 4383], [4384, 4393], [4394, 4396], [4397, 4402], [4403, 4410], [4410, 4411], [4412, 4419], [4420, 4429], [4430, 4433], [4434, 4443], [4444, 4451], [4452, 4462], [4463, 4466], [4467, 4471], [4472, 4476], [4476, 4477], [4478, 4483], [4484, 4494], [4495, 4501], [4502, 4503], [4504, 4506], [4507, 4515], [4516, 4519], [4520, 4522], [4523, 4526], [4527, 4530], [4531, 4539], [4540, 4549], [4550, 4557], [4558, 4562], [4563, 4565], [4565, 4566], [4567, 4575], [4576, 4579], [4580, 4587], [4588, 4598], [4599, 4602], [4602, 4603], [4604, 4606], [4607, 4615], [4616, 4622], [4622, 4623], [4624, 4627], [4628, 4634], [4635, 4638], [4639, 4644], [4645, 4650], [4650, 4651], [4652, 4660], [4661, 4670], [4671, 4684], [4685, 4689], [4690, 4692], [4693, 4699], [4700, 4705], [4706, 4709], [4710, 4713], [4714, 4721], [4722, 4724], [4725, 4729], [4730, 4733], [4734, 4737], [4737, 4738], [4739, 4741], [4742, 4750], [4751, 4753], [4754, 4763], [4764, 4771], [4771, 4772], [4773, 4776], [4777, 4784], [4785, 4794], [4795, 4797], [4798, 4804], [4805, 4814], [4815, 4822], [4823, 4827], [4828, 4833], [4834, 4841], [4842, 4845], [4846, 4854], [4855, 4858], [4859, 4865], [4866, 4873], [4874, 4879], [4879, 4880], [4881, 4887], [4887, 4888], [4889, 4891], [4892, 4898], [4899, 4906], [4907, 4916], [4917, 4922], [4923, 4926], [4927, 4943], [4944, 4947], [4947, 4948], [4952, 4955], [4956, 4957], [4957, 4958], [4959, 4966], [4967, 4969], [4970, 4977], [4978, 4988], [4989, 4997], [4997, 4998], [4999, 5002], [5003, 5005], [5006, 5009], [5010, 5025], [5026, 5033], [5034, 5044], [5045, 5048], [5049, 5056], [5057, 5066], [5067, 5076], [5077, 5080], [5081, 5088], [5089, 5098], [5099, 5101], [5102, 5108], [5109, 5121], [5122, 5129], [5130, 5134], [5135, 5143], [5144, 5150], [5151, 5155], [5155, 5156], [5157, 5160], [5161, 5169], [5170, 5180], [5181, 5190], [5191, 5193], [5194, 5197], [5198, 5203], [5204, 5211], [5212, 5214], [5215, 5219], [5220, 5227], [5228, 5237], [5238, 5243], [5244, 5247], [5248, 5262], [5262, 5263], [5264, 5272], [5273, 5281], [5282, 5291], [5292, 5299], [5300, 5308], [5308, 5309], [5310, 5317], [5318, 5327], [5328, 5334], [5335, 5337], [5338, 5345], [5346, 5357], [5358, 5365], [5366, 5370], [5370, 5371], [5372, 5381], [5382, 5387], [5388, 5389], [5390, 5404], [5405, 5409], [5410, 5417], [5418, 5420], [5421, 5429], [5430, 5433], [5434, 5439], [5440, 5443], [5444, 5447], [5448, 5458], [5459, 5469], [5470, 5496], [5497, 5498], [5499, 5520], [5521, 5529], [5530, 5532], [5533, 5537], [5538, 5545], [5546, 5548], [5549, 5552], [5553, 5557], [5558, 5561], [5562, 5592], [5593, 5602], [5602, 5603], [5604, 5606], [5607, 5611], [5612, 5619], [5620, 5624], [5625, 5634], [5635, 5638], [5639, 5649], [5650, 5653], [5654, 5661], [5662, 5664], [5665, 5670], [5671, 5672], [5673, 5679], [5679, 5680], [5681, 5707], [5708, 5709], [5709, 5713], [5714, 5724], [5724, 5725], [5726, 5730], [5731, 5738], [5739, 5752], [5753, 5758], [5759, 5761], [5762, 5767], [5768, 5770], [5771, 5773], [5774, 5786], [5787, 5793], [5794, 5801], [5801, 5802], [5803, 5812], [5813, 5839], [5840, 5842], [5843, 5849], [5849, 5850], [5851, 5855], [5855, 5856], [5857, 5864], [5865, 5875], [5876, 5880], [5881, 5883], [5884, 5890], [5891, 5893], [5894, 5904], [5905, 5917], [5917, 5918], [5919, 5923], [5924, 5926], [5927, 5932], [5933, 5935], [5936, 5942], [5943, 5949], [5950, 5957], [5958, 5965], [5966, 5968], [5969, 5971], [5971, 5972], [5973, 5978], [5979, 5985], [5986, 5995], [5996, 5998], [5999, 6003], [6004, 6006], [6007, 6019], [6020, 6026], [6027, 6034], [6034, 6035], [6037, 6040], [6041, 6042], [6042, 6043], [6044, 6070], [6071, 6083], [6084, 6091], [6091, 6092], [6093, 6095], [6096, 6098], [6099, 6102], [6103, 6106], [6107, 6110], [6111, 6119], [6120, 6126], [6127, 6130], [6131, 6141], [6142, 6143], [6143, 6146], [6146, 6147], [6148, 6151], [6151, 6152], [6153, 6156], [6156, 6157], [6158, 6161], [6162, 6167], [6168, 6175], [6176, 6179], [6180, 6184], [6185, 6194], [6195, 6201], [6201, 6202], [6203, 6224], [6225, 6226], [6226, 6230], [6231, 6241], [6241, 6242], [6243, 6246], [6247, 6252], [6253, 6261], [6262, 6264], [6265, 6268], [6269, 6275], [6276, 6284], [6285, 6289], [6290, 6298], [6299, 6302], [6303, 6310], [6311, 6316], [6317, 6319], [6320, 6321], [6322, 6325], [6326, 6329], [6329, 6330], [6331, 6334], [6335, 6339], [6340, 6344], [6345, 6347], [6348, 6351], [6352, 6355], [6356, 6358], [6359, 6364], [6365, 6373], [6373, 6374], [6375, 6379], [6380, 6383], [6384, 6388], [6389, 6393], [6394, 6396], [6397, 6400], [6400, 6401], [6402, 6405], [6406, 6412], [6413, 6415], [6416, 6426], [6427, 6429], [6430, 6436], [6437, 6441], [6441, 6442], [6443, 6445], [6446, 6450], [6451, 6458], [6459, 6462], [6463, 6474], [6475, 6478], [6479, 6483], [6484, 6488], [6488, 6489], [6490, 6494], [6495, 6503], [6504, 6506], [6507, 6516], [6517, 6520], [6521, 6527], [6528, 6537], [6538, 6541], [6542, 6544], [6545, 6553], [6554, 6556], [6557, 6565], [6566, 6575], [6576, 6583], [6583, 6584], [6585, 6587], [6588, 6592], [6593, 6596], [6597, 6604], [6604, 6605], [6606, 6609], [6610, 6616], [6617, 6620], [6621, 6628], [6629, 6632], [6633, 6637], [6638, 6649], [6649, 6650], [6651, 6654], [6655, 6658], [6659, 6668], [6669, 6672], [6673, 6675], [6676, 6687], [6688, 6690], [6691, 6699], [6700, 6703], [6704, 6706], [6707, 6712], [6713, 6716], [6717, 6721], [6722, 6726], [6726, 6727], [6728, 6735], [6736, 6740], [6741, 6752], [6753, 6755], [6756, 6757], [6757, 6763], [6763, 6764], [6764, 6769], [6769, 6770], [6771, 6783], [6784, 6786], [6787, 6790], [6791, 6795], [6796, 6800], [6800, 6801], [6802, 6807], [6808, 6818], [6819, 6822], [6823, 6827], [6828, 6830], [6830, 6831], [6832, 6839], [6840, 6843], [6844, 6848], [6849, 6857], [6858, 6860], [6861, 6864], [6865, 6870], [6871, 6872], [6872, 6878], [6878, 6879], [6880, 6881], [6882, 6891], [6892, 6895], [6896, 6900], [6901, 6905], [6906, 6909], [6910, 6911], [6911, 6915], [6916, 6921], [6921, 6922], [6923, 6930], [6931, 6934], [6935, 6939], [6940, 6948], [6949, 6953], [6954, 6957], [6958, 6961], [6962, 6967], [6968, 6969], [6969, 6974], [6974, 6976], [6977, 6981], [6982, 6989], [6990, 6992], [6993, 7000], [7001, 7008], [7009, 7017], [7017, 7018], [7019, 7023], [7024, 7035], [7036, 7045], [7046, 7048], [7049, 7055], [7056, 7059], [7060, 7067], [7068, 7070], [7071, 7079], [7080, 7089], [7090, 7097], [7097, 7098], [7100, 7103], [7104, 7105], [7105, 7106], [7107, 7118], [7119, 7128], [7129, 7141], [7142, 7149], [7149, 7150], [7151, 7158], [7159, 7164], [7165, 7170], [7171, 7179], [7179, 7180], [7181, 7183], [7184, 7193], [7194, 7197], [7198, 7200], [7201, 7205], [7206, 7211], [7212, 7218], [7219, 7221], [7222, 7226], [7227, 7231], [7232, 7234], [7235, 7241], [7242, 7246], [7247, 7252], [7253, 7258], [7259, 7263], [7264, 7272], [7273, 7278], [7279, 7281], [7282, 7291], [7291, 7292], [7293, 7313], [7314, 7315], [7315, 7319], [7320, 7330], [7330, 7331], [7332, 7336], [7337, 7348], [7349, 7350], [7350, 7354], [7355, 7361], [7361, 7362], [7363, 7365], [7366, 7370], [7371, 7373], [7374, 7382], [7383, 7393], [7394, 7396], [7397, 7406], [7406, 7407], [7408, 7414], [7415, 7418], [7419, 7423], [7424, 7431], [7432, 7434], [7435, 7442], [7443, 7448], [7449, 7457], [7457, 7458], [7459, 7466], [7467, 7474], [7475, 7477], [7478, 7481], [7482, 7490], [7491, 7496], [7497, 7499], [7500, 7509], [7510, 7514], [7514, 7515], [7516, 7520], [7521, 7528], [7529, 7531], [7532, 7539], [7540, 7547], [7548, 7556], [7557, 7566], [7567, 7587], [7588, 7590], [7591, 7597], [7597, 7598], [7599, 7602], [7603, 7610], [7611, 7613], [7614, 7625], [7626, 7628], [7629, 7632], [7633, 7641], [7642, 7651], [7652, 7659], [7659, 7660], [7662, 7665], [7666, 7667], [7667, 7668], [7669, 7679], [7680, 7689], [7690, 7701], [7702, 7710], [7710, 7711], [7712, 7715], [7716, 7718], [7719, 7723], [7724, 7734], [7735, 7738], [7739, 7749], [7750, 7753], [7754, 7759], [7760, 7766], [7767, 7769], [7770, 7777], [7777, 7778], [7779, 7783], [7784, 7788], [7789, 7792], [7793, 7796], [7797, 7804], [7805, 7809], [7810, 7815], [7816, 7826], [7827, 7829], [7830, 7836], [7837, 7840], [7841, 7848], [7849, 7853], [7854, 7856], [7857, 7864], [7865, 7870], [7871, 7874], [7875, 7881], [7882, 7890], [7891, 7900], [7901, 7908], [7908, 7909], [7912, 7920], [7921, 7929], [7930, 7939], [7940, 7947], [7948, 7950], [7951, 7962], [7963, 7966], [7967, 7975], [7976, 7977], [7978, 7986], [7987, 7989], [7990, 7996], [7997, 8000], [8001, 8011], [8012, 8015], [8016, 8019], [8020, 8031], [8031, 8032], [8033, 8041], [8042, 8050], [8051, 8054], [8055, 8061], [8062, 8064], [8065, 8068], [8069, 8074], [8075, 8079], [8080, 8084], [8085, 8089], [8090, 8095], [8095, 8096], [8097, 8105], [8106, 8110], [8111, 8141], [8142, 8145], [8146, 8148], [8149, 8152], [8153, 8156], [8157, 8163], [8164, 8172], [8173, 8182], [8183, 8190], [8190, 8191], [8191, 8222], [8223, 8230], [8231, 8234], [8235, 8245], [8245, 8246], [8248, 8251], [8252, 8253], [8253, 8254], [8255, 8265], [8266, 8268], [8269, 8278], [8279, 8285], [8286, 8287], [8288, 8295], [8295, 8296], [8297, 8299], [8300, 8302], [8303, 8306], [8307, 8310], [8311, 8313], [8314, 8319], [8320, 8325], [8325, 8326], [8327, 8334], [8335, 8337], [8338, 8347], [8348, 8366], [8367, 8369], [8370, 8375], [8376, 8382], [8383, 8385], [8386, 8388], [8389, 8397], [8398, 8400], [8401, 8409], [8410, 8419], [8420, 8427], [8427, 8428], [8428, 8431], [8431, 8433], [8434, 8439], [8440, 8449], [8450, 8468], [8468, 8469], [8470, 8473], [8474, 8477], [8478, 8484], [8485, 8488], [8489, 8492], [8493, 8504], [8505, 8514], [8515, 8521], [8522, 8532], [8533, 8536], [8537, 8544], [8545, 8548], [8549, 8555], [8556, 8558], [8559, 8562], [8563, 8566], [8567, 8576], [8577, 8579], [8580, 8589], [8590, 8595], [8596, 8605], [8606, 8613], [8613, 8614], [8616, 8619], [8620, 8621], [8621, 8622], [8623, 8633], [8634, 8636], [8637, 8643], [8644, 8652], [8653, 8662], [8663, 8670], [8670, 8671], [8672, 8676], [8677, 8703], [8704, 8707], [8708, 8729], [8730, 8740], [8741, 8744], [8745, 8751], [8751, 8752], [8753, 8760], [8761, 8768], [8769, 8778], [8779, 8784], [8784, 8785], [8786, 8788], [8789, 8795], [8796, 8803], [8804, 8810], [8811, 8818], [8819, 8824], [8825, 8834], [8835, 8843], [8844, 8846], [8847, 8851], [8852, 8854], [8855, 8858], [8858, 8859], [8860, 8862], [8863, 8865], [8866, 8868], [8869, 8872], [8873, 8877], [8877, 8878], [8879, 8883], [8884, 8886], [8887, 8894], [8895, 8896], [8897, 8900], [8901, 8911], [8912, 8919], [8920, 8924], [8924, 8925], [8926, 8929], [8930, 8933], [8934, 8941], [8942, 8946], [8947, 8950], [8951, 8958], [8959, 8961], [8962, 8971], [8972, 8980], [8981, 8987], [8988, 8996], [8996, 8997], [8998, 9000], [9001, 9003], [9004, 9008], [9009, 9031], [9031, 9032], [9032, 9033], [9034, 9040], [9041, 9043], [9044, 9053], [9054, 9060], [9061, 9063], [9064, 9067], [9068, 9072], [9073, 9083], [9084, 9095], [9096, 9101], [9102, 9111], [9111, 9112], [9113, 9119], [9120, 9122], [9123, 9126], [9127, 9135], [9136, 9147], [9148, 9152], [9153, 9157], [9158, 9161], [9162, 9164], [9165, 9173], [9174, 9180], [9181, 9183], [9184, 9187], [9188, 9193], [9194, 9203], [9203, 9204], [9204, 9207], [9208, 9210], [9211, 9214], [9214, 9216], [9217, 9219], [9220, 9225], [9226, 9228], [9229, 9232], [9233, 9236], [9237, 9250], [9251, 9253], [9254, 9255], [9256, 9261], [9262, 9267], [9268, 9275], [9276, 9278], [9279, 9284], [9284, 9285], [9286, 9288], [9289, 9301], [9302, 9306], [9307, 9310], [9311, 9316], [9316, 9317], [9318, 9320], [9321, 9325], [9326, 9336], [9337, 9340], [9341, 9344], [9345, 9347], [9348, 9351], [9352, 9359], [9360, 9365], [9366, 9371], [9372, 9380], [9380, 9384], [9385, 9387], [9388, 9394], [9394, 9395], [9395, 9398], [9399, 9400], [9401, 9402], [9402, 9403], [9404, 9405], [9406, 9410], [9411, 9416], [9417, 9422], [9423, 9424], [9425, 9432], [9433, 9437], [9438, 9440], [9441, 9452], [9453, 9454], [9454, 9457], [9457, 9458], [9459, 9461], [9461, 9462], [9463, 9466], [9467, 9470], [9470, 9472], [9473, 9478], [9479, 9488], [9489, 9491], [9492, 9498], [9498, 9499], [9500, 9504], [9505, 9507], [9508, 9512], [9513, 9516], [9517, 9519], [9520, 9529], [9530, 9533], [9533, 9534], [9535, 9536], [9536, 9538], [9539, 9546], [9547, 9553], [9554, 9556], [9557, 9563], [9563, 9564], [9567, 9570], [9571, 9573], [9573, 9574], [9575, 9580], [9581, 9589], [9590, 9595], [9595, 9596], [9597, 9601], [9602, 9622], [9623, 9632], [9633, 9635], [9636, 9642], [9642, 9643], [9644, 9651], [9652, 9659], [9660, 9669], [9670, 9675], [9675, 9676], [9677, 9683], [9684, 9691], [9692, 9700], [9701, 9712], [9713, 9717], [9718, 9722], [9723, 9726], [9727, 9729], [9730, 9738], [9739, 9745], [9746, 9748], [9749, 9752], [9753, 9758], [9759, 9768], [9768, 9769], [9769, 9772], [9773, 9775], [9776, 9779], [9779, 9781], [9782, 9784], [9785, 9790], [9791, 9793], [9794, 9797], [9798, 9801], [9802, 9815], [9816, 9818], [9819, 9820], [9821, 9826], [9827, 9832], [9833, 9840], [9841, 9843], [9844, 9849], [9849, 9850], [9851, 9856], [9857, 9860], [9861, 9868], [9869, 9877], [9878, 9888], [9889, 9891], [9891, 9893], [9894, 9896], [9897, 9901], [9902, 9904], [9905, 9909], [9909, 9910], [9911, 9913], [9914, 9926], [9927, 9931], [9932, 9935], [9936, 9941], [9941, 9942], [9943, 9945], [9946, 9950], [9951, 9961], [9962, 9965], [9966, 9969], [9970, 9972], [9973, 9976], [9977, 9984], [9985, 9990], [9991, 9996], [9997, 10005], [10005, 10009], [10010, 10012], [10013, 10019], [10019, 10020], [10020, 10023], [10024, 10025], [10026, 10027], [10027, 10028], [10029, 10030], [10031, 10035], [10036, 10041], [10042, 10047], [10048, 10049], [10050, 10057], [10058, 10062], [10063, 10065], [10066, 10077], [10078, 10079], [10079, 10081], [10081, 10082], [10083, 10088], [10089, 10098], [10099, 10101], [10102, 10108], [10108, 10109], [10110, 10114], [10115, 10117], [10118, 10122], [10123, 10126], [10127, 10129], [10130, 10139], [10140, 10143], [10143, 10144], [10146, 10153], [10154, 10157], [10158, 10164], [10165, 10171], [10172, 10181], [10182, 10184], [10185, 10187], [10188, 10191], [10192, 10195], [10196, 10202], [10203, 10207], [10208, 10218], [10219, 10222], [10223, 10229], [10230, 10241], [10242, 10250], [10250, 10251], [10252, 10260], [10261, 10268], [10269, 10271], [10272, 10275], [10276, 10278], [10279, 10282], [10283, 10286], [10286, 10287], [10288, 10291], [10292, 10300], [10301, 10310], [10311, 10318], [10319, 10321], [10322, 10326], [10327, 10329], [10330, 10341], [10342, 10344], [10345, 10357], [10357, 10358], [10359, 10362], [10363, 10369], [10370, 10376], [10377, 10382], [10383, 10395], [10396, 10403], [10404, 10408], [10409, 10414], [10415, 10417], [10418, 10427], [10428, 10431], [10432, 10437], [10438, 10442], [10443, 10445], [10446, 10450], [10451, 10462], [10463, 10467], [10468, 10479], [10480, 10483], [10484, 10490], [10491, 10493], [10494, 10495], [10496, 10502], [10502, 10503], [10504, 10509], [10510, 10517], [10518, 10521], [10522, 10528], [10529, 10535], [10536, 10538], [10539, 10542], [10542, 10543], [10544, 10546], [10547, 10550], [10551, 10556], [10556, 10557], [10558, 10562], [10563, 10565], [10566, 10573], [10573, 10574], [10575, 10587], [10588, 10592], [10593, 10595], [10596, 10606], [10607, 10616], [10616, 10617], [10618, 10622], [10623, 10628], [10629, 10632], [10633, 10637], [10638, 10648], [10649, 10652], [10653, 10656], [10657, 10661], [10662, 10668], [10669, 10673], [10674, 10678], [10679, 10683], [10684, 10689], [10689, 10690], [10692, 10695], [10696, 10698], [10698, 10699], [10700, 10710], [10711, 10715], [10715, 10716], [10716, 10717], [10717, 10719], [10720, 10732], [10733, 10737], [10737, 10738], [10738, 10739], [10739, 10741], [10742, 10752], [10753, 10759], [10760, 10769], [10770, 10775], [10776, 10780], [10780, 10781], [10781, 10782], [10782, 10784], [10785, 10795], [10796, 10804], [10805, 10812], [10813, 10823], [10824, 10827], [10828, 10838], [10839, 10843], [10844, 10849], [10850, 10855], [10856, 10861], [10862, 10866], [10867, 10871], [10872, 10875], [10876, 10883], [10884, 10886], [10887, 10894], [10895, 10903], [10904, 10906], [10907, 10912], [10913, 10921], [10922, 10924], [10924, 10925], [10926, 10928], [10929, 10933], [10934, 10944], [10945, 10953], [10954, 10964], [10965, 10971], [10972, 10980], [10981, 10990], [10991, 10998], [10999, 11002], [11003, 11013], [11014, 11017], [11018, 11020], [11021, 11026], [11026, 11027], [11028, 11030], [11031, 11035], [11036, 11043], [11044, 11050], [11051, 11057], [11058, 11060], [11061, 11067], [11068, 11076], [11077, 11086], [11087, 11094], [11095, 11099], [11100, 11111], [11112, 11115], [11116, 11122], [11123, 11127], [11128, 11131], [11132, 11139], [11140, 11142], [11143, 11150], [11151, 11158], [11158, 11159], [11160, 11162], [11163, 11169], [11170, 11177], [11178, 11189], [11190, 11192], [11193, 11201], [11202, 11215], [11215, 11216], [11217, 11227], [11228, 11238], [11239, 11241], [11242, 11250], [11251, 11255], [11255, 11256], [11257, 11266], [11267, 11274], [11275, 11279], [11280, 11288], [11289, 11299], [11300, 11307], [11308, 11312], [11313, 11319], [11320, 11323], [11324, 11327], [11328, 11337], [11338, 11345], [11346, 11349], [11350, 11351], [11351, 11352], [11352, 11357], [11357, 11358], [11359, 11364], [11365, 11371], [11372, 11373], [11374, 11438], [11439, 11441], [11442, 11445], [11446, 11447], [11447, 11452], [11452, 11457], [11457, 11462], [11462, 11464], [11464, 11468], [11468, 11470], [11470, 11472], [11472, 11473], [11473, 11483], [11483, 11484], [11484, 11491], [11491, 11492], [11492, 11524], [11524, 11525], [11525, 11526], [11526, 11527], [11527, 11529], [11529, 11530], [11530, 11533], [11533, 11534], [11534, 11553], [11553, 11556], [11556, 11559], [11560, 11565], [11566, 11573], [11574, 11575], [11575, 11582], [11583, 11590], [11590, 11592], [11592, 11657], [11658, 11668], [11669, 11670], [11670, 11671], [11671, 11672], [11673, 11678], [11678, 11681], [11681, 11693], [11693, 11694], [11694, 11703], [11703, 11704], [11704, 11707], [11707, 11708], [11708, 11715], [11715, 11716], [11716, 11769], [11769, 11770], [11771, 11772], [11772, 11773], [11773, 11774], [11775, 11780], [11780, 11783], [11783, 11788], [11788, 11789], [11789, 11798], [11798, 11799], [11799, 11802], [11802, 11803], [11803, 11808], [11808, 11809], [11809, 11816], [11816, 11817], [11817, 11822], [11822, 11823], [11823, 11828], [11828, 11829], [11829, 11856], [11857, 11858], [11858, 11859], [11859, 11860], [11861, 11866], [11866, 11869], [11869, 11874], [11874, 11875], [11875, 11884], [11884, 11885], [11885, 11888], [11888, 11889], [11889, 11894], [11894, 11895], [11895, 11902], [11902, 11903], [11903, 11908], [11908, 11909], [11909, 11912], [11912, 11913], [11913, 11918], [11918, 11919], [11919, 11944]]}, {"type": "SEGMENT", "hasID": false, "hasSpan": true, "attrs": [{"name": "annotator", "type": "string", "aggregation": null}, {"name": "set", "type": "string", "aggregation": null}, {"name": "status", "type": "string", "aggregation": null}], "annots": [[0, 11945, "jlasky", "content", "human gold"]]}, {"type": "Deobfuscate/Decode Files or Information (T1140)", "hasID": false, "hasSpan": true, "attrs": [{"name": "comment", "type": "string", "aggregation": null}], "annots": [[891, 942], [2452, 2496], [4504, 4526], [4079, 4112], [4739, 4772], [4970, 4998], [4576, 4602], [10575, 10617], [2796, 2826], [5328, 5371]]}, {"type": "Obfuscated Files or Information (T1027)", "hasID": false, "hasSpan": true, "attrs": [{"name": "comment", "type": "string", "aggregation": null}], "annots": [[490, 514], [1525, 1551], [4540, 4566], [2754, 2794], [4751, 4771], [11077, 11111], [3435, 3460]]}, {"type": "Software Packing (T1027.002)", "hasID": false, "hasSpan": true, "attrs": [{"name": "comment", "type": "string", "aggregation": null}], "annots": [[710, 745], [1303, 1331], [1332, 1362]]}, {"type": "Native API (T1106)", "hasID": false, "hasSpan": true, "attrs": [{"name": "comment", "type": "string", "aggregation": null}], "annots": [[2204, 2238], [3813, 3833], [3920, 3977], [3978, 4028], [4029, 4078], [3857, 3888], [3753, 3793], [4889, 4948], [8106, 8145]]}, {"type": "Binary Padding (T1027.001)", "hasID": false, "hasSpan": true, "attrs": [{"name": "comment", "type": "string", "aggregation": null}], "annots": [[2640, 2703]]}, {"type": "Dynamic API Resolution (T1027.007)", "hasID": false, "hasSpan": true, "attrs": [{"name": "comment", "type": "string", "aggregation": null}], "annots": [[2730, 2752]]}, {"type": "Process Hollowing (T1055.012)", "hasID": false, "hasSpan": true, "attrs": [{"name": "comment", "type": "string", "aggregation": null}], "annots": [[4773, 4880]]}], "version": 2}